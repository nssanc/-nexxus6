#!/su/bin/sush
if [ -e /data/DeYuSdisabler ]; then
echo Script disabled
exit
else
mount -o remount,rw -t auto rootfs
mount -o remount,rw -t auto /
mount -o remount,rw -t auto /sys
mount -o remount,rw -t auto /proc
mount -o remount,rw -t auto /system
mount -o remount,rw -t auto /data
mount -o remount,rw -t auto /cache
#mount -o remount,noatime,noauto_da_alloc,nodiratime,barrier=0,nobh,errors=continue,norelatime,nomblk_io_submit,rw /system
mount -o remount,commit=19,nomblk_io_submit,errors=continue,noatime,noauto_da_alloc,nosuid,nodev,nodiratime,barrier=0,nobh,norelatime,rw /system
mount -o remount,commit=19,nomblk_io_submit,errors=continue,noatime,noauto_da_alloc,nosuid,nodev,nodiratime,barrier=0,nobh,norelatime,rw /data
mount -o remount,commit=19,nomblk_io_submit,errors=continue,noatime,noauto_da_alloc,nosuid,nodev,nodiratime,barrier=0,nobh,norelatime,rw /cache
until grep -e DeYuS /proc/version; do
sleep 1
done
sleep 5
L="log -p i -t DeYuS"; $L "DeYuS Script Started on `getprop | grep version` at $( date +"%m-%d-%Y %H:%M:%S" ) running as $(whoami) from here $(pwd)"
#Directory
if [ -d /su ]; then
RUN=/su/etc/Run.txt
LOG=/su/etc/@DeYuS.log
BUSY=/su/etc/Busybox.txt
RRDEBUGDIR=/su/etc/RRdebug
else
RUN=/system/etc/Run.txt
LOG=/system/etc/@DeYuS.log
BUSY=/system/etc/Busybox.txt
RRDEBUGDIR=/system/etc/RRdebug
fi
RRDEBUG=/sys/fs/pstore
RUNblk=/sdcard
if [ -e $RUN ]; then
sleep 1; else
echo "1" > $RUN; fi
until [[ -f $RUN ]]; do
sleep 1
done
if [ -e $BUSY ]; then
rm $BUSY; fi
busybox | tee -a $BUSY
if grep BusyBox $BUSY; then
####Master-Switch####
if grep 1 $RUN; then
clear
if grep 0 $RUN; then
until [[ -d $RUNblk ]]; do
sleep 1
done
#sleep 35
fi
if grep 0 $RUN; then
TUNE=`ls -d /dev/block/*`;
for T in $TUNE; do
tune2fs -o journal_data_writeback $T
tune2fs -O ^has_journal $T
done; fi
#chmod -R 777 /cache
#chmod 777 /data
if [ -e $LOG ]; then
rm $LOG; fi
touch $LOG
clear
if [ -e $RRDEBUG/console-ramoops ]; then
KPANIC=1
echo WARNING KERNEL PANIC DETECTED !!! | tee -a $LOG; else
KPANIC=0
echo NO KERNEL PANIC DETECTED; fi
if [ $KPANIC -eq "1" ]; then
mkdir $RRDEBUGDIR
cp $RRDEBUG/* $RRDEBUGDIR; fi
echo "Dead-neM tweaks : $( date +"%m-%d-%Y %H:%M:%S" ) running as $(whoami) from here $(pwd)" | tee -a $LOG
#Force SystemLess Root
Rless=/data/.supersu
if grep "SYSTEMLESS=true" $Rless; then
echo SystemLess Root already forced | tee -a $LOG; else
rm /data/.supersu
echo "SYSTEMLESS=true" >> $Rless | tee -a $LOG
echo SystemLess Root forced; fi
if grep 1 /sys/fs/selinux/enforce; then
chmod 666 /sys/fs/selinux/enforce
echo 0 > /sys/fs/selinux/enforce
setenforce 0
SELINUX=permissive
chmod 444 /sys/fs/selinux/enforce; fi
if grep 0 /sys/fs/selinux/enforce; then
echo "Selinux is set to permissive" | tee -a $LOG; else
echo "Cannot set Selinux to permissive" | tee -a $LOG; fi
#echo "Y" > /sys/module/msm_thermal/parameters/enabled
#echo "120" > /sys/module/msm_thermal/parameters/temp_threshold
#echo "3000000" > /sys/module/msm_thermal/parameters/poll_interval
#echo "2880000" > /sys/module/msm_thermal/parameters/freq_warm
#echo "500 575 645 665 675 685 695 705 715 725 735 745 795 805 815 825 835 845 855 865 875 885 895 905 915 925 935 950 965 980 995 1010 1025 1040 1055 1070 1085 1100 1155 1180" > /sys/devices/system/cpu/cpu0/cpufreq/UV_mV_table
#MAX=3033600
MAX=2880000
#MIN=223200
MIN=35800
SUSP=1267200
#SUSP=1958400
GOV=darkness
GOV2=alucard
GOV3=alucard
GOV4=alucard
if grep 1 $RUN; then
echo 0 > /sys/kernel/msm_limiter/mpd_enabled
echo 1 > /sys/kernel/msm_limiter/freq_control
if grep 1 /sys/kernel/msm_limiter/freq_control; then
echo "MSM Limiter is ON" | tee -a $LOG
if grep "0:$GOV 1:$GOV2 2:$GOV3 3:$GOV4"  /sys/kernel/msm_limiter/scaling_governor; then
echo "CPU governor is already set to 0:$GOV 1:$GOV2 2:$GOV3 3:$GOV4" | tee -a $LOG; else
echo "0:$GOV 1:$GOV2 2:$GOV3 3:$GOV4" > /sys/kernel/msm_limiter/scaling_governor
#chmod 444 /sys/kernel/msm_limiter/scaling_governor
if grep "0:$GOV 1:$GOV2 2:$GOV3 3:$GOV4"  /sys/kernel/msm_limiter/scaling_governor; then
echo "CPU governor is set to 0:$GOV 1:$GOV2 2:$GOV3 3:$GOV4" | tee -a $LOG; else
echo "CPU governor $GOV or $GOV2 or $GOV3 or $GOV4 doesn't exist..." | tee -a $LOG; fi; fi
echo "0:$SUSP 1:$SUSP 2:$SUSP 3:$SUSP" > /sys/kernel/msm_limiter/suspend_max_freq
echo "0:$MIN 1:$MIN 2:$MIN 3:$MIN" > /sys/kernel/msm_limiter/suspend_min_freq
echo "0:$MAX 1:$MAX 2:$MAX 3:$MAX" > /sys/kernel/msm_limiter/resume_max_freq
if grep $MAX /sys/kernel/msm_limiter/resume_max_freq; then
echo "CPU max frequency set to $MAX" | tee -a $LOG; else
echo "CPU max frequency $MAX doesn't exist..." | tee -a $LOG; fi
if grep $MIN  /sys/kernel/msm_limiter/suspend_min_freq; then
echo "CPU min frequency set to $MIN" | tee -a $LOG; else
echo "CPU min frequency $MIN doesn't exist..." | tee -a $LOG; fi; else
if grep 1 $RUN; then
CPU1=/sys/devices/system/cpu/cpu0
CPU2=/sys/devices/system/cpu/cpu1
CPU3=/sys/devices/system/cpu/cpu2
CPU4=/sys/devices/system/cpu/cpu3
for CPUCTL in $CPU1 $CPU2 $CPU3 $CPU4; do
chmod 644 $CPUCTL/cpufreq/scaling_governor; chmod 644 $CPUCTL/cpufreq/scaling_min_freq; chmod 644 $CPUCTL/cpufreq/scaling_max_freq; chmod 644 $CPUCTL/cpufreq/screen_off_max_freq
echo "1" > $CPUCTL/online
echo "$GOV" > $CPUCTL/cpufreq/scaling_governor
echo "$MIN" > $CPUCTL/cpufreq/scaling_min_freq
echo "$MAX" > $CPUCTL/cpufreq/scaling_max_freq
echo "$SUSP" > $CPUCTL/cpufreq/screen_off_max_freq
#chmod 444 $CPUCTL/cpufreq/scaling_governor; chmod 444 $CPUCTL/cpufreq/scaling_min_freq; chmod 444 $CPUCTL/cpufreq/scaling_max_freq; chmod 444 $CPUCTL/cpufreq/screen_off_max_freq
done
if grep $GOV $CPU1/cpufreq/scaling_governor; then
echo "CPU governor is set to $GOV" | tee -a $LOG; else
echo "CPU governor $GOV doesn't exist..." | tee -a $LOG; fi
if grep $MAX $CPU1/cpufreq/scaling_max_freq; then
echo "CPU max frequency set to $MAX" | tee -a $LOG; else
echo "CPU max frequency $MAX doesn't exist..." | tee -a $LOG; fi
if grep $MIN $CPU1/cpufreq/scaling_min_freq; then
echo "CPU min frequency set to $MIN" | tee -a $LOG; else
echo "CPU min frequency $MIN doesn't exist..." | tee -a $LOG; fi; fi; fi; fi
if grep 1 $RUN; then
echo 40000 > /sys/devices/system/cpu/cpufreq/darkness/sampling_rate
echo 1 > /sys/devices/system/cpu/cpufreq/darkness/ignore_nice_load
echo "Y" > /sys/module/smb135x_charger/parameters/use_wlock
echo Y > /sys/module/cpu_boost/parameters/hotplug_boost
echo 1 > /sys/module/cpu_boost/parameters/input_boost_enabled
echo 1 > /sys/module/cpu_boost/parameters/wakeup_boost
echo 500 > /sys/module/cpu_boost/parameters/boost_ms
echo 2500 > /sys/module/cpu_boost/parameters/input_boost_ms
echo 5000 > /sys/module/cpu_boost/parameters/min_input_interval
echo 0:223200 1:223200 2:223200 3:223200 > /sys/module/cpu_boost/parameters/input_boost_freq
echo 806400 > /sys/module/cpu_boost/parameters/sync_threshold
echo "0" > /sys/devices/platform/msm_sleeper/enabled
echo "0" > /sys/module/blu_plug/parameters/enabled
#echo 1 > /sys/kernel/zen_decision/enabled
echo 0 > /sys/kernel/zen_decision/enabled
chmod 644 /sys/kernel/zen_decision/enabled
if grep 1 /sys/kernel/zen_decision/enabled; then
echo "Hotplug Zen decision" | tee -a $LOG; fi
echo 6000 > /sys/kernel/zen_decision/wake_wait_time
echo 0 > /sys/kernel/zen_decision/bat_threshold_ignore
echo 35 > /sys/kernel/alucard_hotplug/cpu_down_rate
echo 15 > /sys/kernel/alucard_hotplug/cpu_up_rate
echo 1 > /sys/kernel/alucard_hotplug/hotplug_enable
if grep 1 /sys/kernel/alucard_hotplug/hotplug_enable; then
echo "Hotplug Alucard" | tee -a $LOG; fi
#echo 1 > /sys/kernel/state_helper/enabled
#echo 0 > /sys/kernel/state_helper/enabled
if grep 1 /sys/kernel/state_helper/enabled; then
echo "Hotplug State Helper" | tee -a $LOG; fi
echo 5 > /sys/kernel/state_helper/batt_level_cri
echo 10 > /sys/kernel/state_helper/batt_level_eco
#echo 1 > /sys/kernel/state_helper/max_cpus_cri
#echo 1 > /sys/kernel/state_helper/max_cpus_eco
#echo 25 > /sys/kernel/state_helper/batt_level_eco
#echo 10 > /sys/kernel/state_helper/batt_level_cri
#echo 1 > /sys/kernel/thunderplug/hotplug_enabled
if grep 1 /sys/kernel/thunderplug/hotplug_enabled; then
echo "Hotplug Thunderplug" | tee -a $LOG; fi
echo 50 > /sys/kernel/thunderplug/load_threshold
echo 1 > /sys/kernel/thunderplug/endurance_level
#echo 1 > /sys/kernel/msm_mpdecision/conf/enabled
chmod 644 /sys/kernel/msm_mpdecision/conf/enabled
if grep 1 /sys/kernel/msm_mpdecision/conf/enabled; then
echo "Hotplug Bricked" | tee -a $LOG; fi
echo 200 > /sys/kernel/msm_mpdecision/conf/delay
echo 2000 > /sys/kernel/msm_mpdecision/conf/startdelay
echo 500 > /sys/kernel/msm_mpdecision/conf/down_lock_duration
#echo 5000 > /sys/kernel/msm_mpdecision/conf/down_lock_duration
echo 806400 > /sys/kernel/msm_mpdecision/conf/idle_freq
NUMUP=15
NUMDOWN=80
TIMEUP=800
TIMEDOWN=400
#chmod 0664 /sys/kernel/msm_mpdecision/conf/*
echo $NUMUP > /sys/kernel/msm_mpdecision/conf/nwns_threshold_0
echo $NUMUP > /sys/kernel/msm_mpdecision/conf/nwns_threshold_2
echo $NUMUP > /sys/kernel/msm_mpdecision/conf/nwns_threshold_4
echo $NUMUP > /sys/kernel/msm_mpdecision/conf/nwns_threshold_6
echo $NUMDOWN > /sys/kernel/msm_mpdecision/conf/nwns_threshold_1
echo $NUMDOWN > /sys/kernel/msm_mpdecision/conf/nwns_threshold_3
echo $NUMDOWN > /sys/kernel/msm_mpdecision/conf/nwns_threshold_5
echo $NUMDOWN > /sys/kernel/msm_mpdecision/conf/nwns_threshold_7
echo $TIMEUP > /sys/kernel/msm_mpdecision/conf/twts_threshold_0
echo $TIMEUP > /sys/kernel/msm_mpdecision/conf/twts_threshold_2
echo $TIMEUP > /sys/kernel/msm_mpdecision/conf/twts_threshold_4
echo $TIMEUP > /sys/kernel/msm_mpdecision/conf/twts_threshold_6
echo $TIMEDOWN > /sys/kernel/msm_mpdecision/conf/twts_threshold_1
echo $TIMEDOWN > /sys/kernel/msm_mpdecision/conf/twts_threshold_3
echo $TIMEDOWN > /sys/kernel/msm_mpdecision/conf/twts_threshold_5
echo $TIMEDOWN > /sys/kernel/msm_mpdecision/conf/twts_threshold_7
echo 2 > /sys/kernel/msm_mpdecision/conf/max_cpus_online_susp
echo 1 > /sys/kernel/msm_mpdecision/conf/max_cpus_online
echo 4 > /sys/kernel/msm_mpdecision/conf/max_cpus_online
echo "Y" > /sys/module/workqueue/parameters/power_efficient; fi
if grep 1 $RUN; then
#GPU=simple_ondemand
GPU=msm-adreno-tz
GPUFREQ=600000000
echo "$GPU" > /sys/devices/fdb00000.qcom,kgsl-3d0/devfreq/fdb00000.qcom,kgsl-3d0/governor
#echo "$GPUFREQ" > /sys/devices/fdb00000.qcom,kgsl-3d0/kgsl/kgsl-3d0/max_gpuclk
#echo "$GPUFREQ" > /sys/devices/fdb00000.qcom,kgsl-3d0/devfreq/fdb00000.qcom,kgsl-3d0/max_freq
echo "Y" > /sys/module/adreno_idler/parameters/adreno_idler_active
echo "33" > /sys/module/adreno_idler/parameters/adreno_idler_downdifferential
echo "10" > /sys/module/adreno_idler/parameters/adreno_idler_idlewait
echo "10000" > /sys/module/adreno_idler/parameters/adreno_idler_idleworkload
echo "1" > /sys/module/simple_gpu_algorithm/parameters/simple_gpu_activate
echo "2" > /sys/module/simple_gpu_algorithm/parameters/simple_laziness
echo "8000" > /sys/module/simple_gpu_algorithm/parameters/simple_ramp_threshold
if grep $GPU /sys/devices/fdb00000.qcom,kgsl-3d0/devfreq/fdb00000.qcom,kgsl-3d0/governor; then
echo "GPU governor set to $GPU" | tee -a $LOG; else
echo "GPU governor $GPU not present" | tee -a $LOG; fi; fi
if grep 0 $RUN; then
if [ -e /su/xbin/rngd ]; then
if [ -e /data/rngd.pid ]; then
rm /data/rngd.pid; fi
/su/xbin/rngd -t 2 -T 1 -s 256 --fill-watermark=80%
sleep 1
echo -8 > /proc/$(pgrep rngd)/oom_score
until [[ "$(pgrep rngd)" ]]; do
sleep 1
done
renice -8 $(pgrep rngd); fi
if [ -e /data/rngd.pid ]; then
echo "Entropy is activated" | tee -a $LOG; else
echo "Entropy is desactivated" | tee -a $LOG; fi; fi
if [ -e /sys/module/sync/parameters/fsync_enabled ]; then
echo "Y" > /sys/module/sync/parameters/fsync_enabled; fi
if grep Y /sys/module/sync/parameters/fsync_enabled; then
echo "Fsync is activated" | tee -a $LOG; else
echo "Fsync is desactivated and THIS IS REALLY BAD !!!" | tee -a $LOG; fi
if [ -e /sys/module/mmc_core/parameters/crc ]; then
echo "1" > /sys/module/mmc_core/parameters/crc; fi
if grep 1 /sys/module/mmc_core/parameters/crc; then
echo "Spi-crc is activated" | tee -a $LOG; else
echo "Spi-crc is desactivated and THIS IS REALLY BAD !!!" | tee -a $LOG; fi
if grep 1 $RUN; then
echo "Setting up build properties..." | tee -a $LOG
chmod 666 /proc/vmallocinfo
Buildprop=/system/build.prop
# Force Background apps
if  grep -qr ro.sys.fw.bg_apps_limit $Buildprop; then
   sed -i "s/ro.sys.fw.bg_apps_limit=[^ ]*/ro.sys.fw.bg_apps_limit=36/" $Buildprop; else
   echo ro.sys.fw.bg_apps_limit=36 >> $Buildprop; fi
# Force Default network
if  grep ro.telephony.default_network $Buildprop; then
   sed -i "s/ro.telephony.default_network=[^ ]*/ro.telephony.default_network=11/" $Buildprop; else
   echo ro.telephony.default_network=11 >> $Buildprop; fi
# Force Doze display
if  grep doze.display.supported $Buildprop; then
   sed -i "s/doze.display.supported=[^ ]*/doze.display.supported=true/" $Buildprop; else
   echo doze.display.supported=true >> $Buildprop; fi
# Force Doze notification
if  grep doze.pulse.notifications $Buildprop; then
   sed -i "s/doze.pulse.notifications=[^ ]*/doze.pulse.notifications=true/" $Buildprop; else
   echo doze.pulse.notifications=true >> $Buildprop; fi
# Force Doze accelerometer
if  grep doze.use.accelerometer $Buildprop; then
   sed -i "s/doze.use.accelerometer=[^ ]*/doze.use.accelerometer=true/" $Buildprop; else
   echo doze.use.accelerometer=true >> $Buildprop; fi
# Force Doze duration
if  grep doze.pulse.duration.in $Buildprop; then
   sed -i "s/doze.pulse.duration.in=[^ ]*/doze.pulse.duration.in=1500/" $Buildprop; else
   echo doze.pulse.duration.in=1500 >> $Buildprop; fi
# Force Doze duration visible
if  grep doze.pulse.duration.visible $Buildprop; then
   sed -i "s/doze.pulse.duration.visible=[^ ]*/doze.pulse.duration.visible=6000/" $Buildprop; else
   echo doze.pulse.duration.visible=6000 >> $Buildprop; fi
# Force Doze duration out
if  grep doze.pulse.duration.out $Buildprop; then
   sed -i "s/doze.pulse.duration.out=[^ ]*/doze.pulse.duration.out=2500/" $Buildprop; else
   echo doze.pulse.duration.out=2500 >> $Buildprop; fi
# Force Doze pulse schedule
if  grep doze.pulse.schedule $Buildprop; then
   sed -i "s/doze.pulse.schedule=[^ ]*/doze.pulse.schedule=1s/" $Buildprop; else
   echo doze.pulse.schedule=1s >> $Buildprop; fi
# Force Doze brightness
if  grep doze.pulse.brightness $Buildprop; then
   sed -i "s/doze.pulse.brightness=[^ ]*/doze.pulse.brightness=5/" $Buildprop; else
   echo doze.pulse.brightness=5 >> $Buildprop; fi
# Force Doze schedule request
if  grep doze.pulse.schedule.resets $Buildprop; then
   sed -i "s/doze.pulse.schedule.resets=[^ ]*/doze.pulse.schedule.resets=1/" $Buildprop; else
   echo doze.pulse.schedule.resets=1 >> $Buildprop; fi
# GPU tweaks??
if  grep -qr debug.sf.hw $Buildprop; then
   sed -i "s/debug.sf.hw=[^ ]*/debug.sf.hw=1/" $Buildprop; else
   echo debug.sf.hw=1 >> $Buildprop; fi
if  grep -qr debug.composition.type $Buildprop; then
   sed -i "s/debug.composition.type=[^ ]*/debug.composition.type=gpu/" $Buildprop; else
   echo debug.composition.type=gpu >> $Buildprop; fi
if  grep -qr persist.sys.composition.type $Buildprop; then
   sed -i "s/persist.sys.composition.type=[^ ]*/persist.sys.composition.type=gpu/" $Buildprop; else
   echo persist.sys.composition.type=gpu >> $Buildprop; fi
if  grep -qr debug.performance.tuning $Buildprop; then
   sed -i "s/debug.performance.tuning=[^ ]*/debug.performance.tuning=1/" $Buildprop; else
   echo debug.performance.tuning=1 >> $Buildprop; fi
if  grep -qr debug.enabletr $Buildprop; then
   sed -i "s/debug.enabletr=[^ ]*/debug.enabletr=true/" $Buildprop; else
   echo debug.enabletr=true >> $Buildprop; fi
if  grep -qr debug.qctwa.preservebuf $Buildprop; then
   sed -i "s/debug.qctwa.preservebuf=[^ ]*/debug.qctwa.preservebuf=1/" $Buildprop; else
   echo debug.qctwa.preservebuf=1 >> $Buildprop; fi
if  grep -qr dev.pm.dyn_samplingrate $Buildprop; then
   sed -i "s/dev.pm.dyn_samplingrate=[^ ]*/dev.pm.dyn_samplingrate=1/" $Buildprop; else
   echo dev.pm.dyn_samplingrate=1 >> $Buildprop; fi
if  grep -qr video.accelerate.hw $Buildprop; then
   sed -i "s/video.accelerate.hw=[^ ]*/video.accelerate.hw=1/" $Buildprop; else
   echo video.accelerate.hw=1 >> $Buildprop; fi
if  grep -qr ro.vold.umsdirtyratio $Buildprop; then
   sed -i "s/ro.vold.umsdirtyratio=[^ ]*/ro.vold.umsdirtyratio=20/" $Buildprop; else
   echo ro.vold.umsdirtyratio=20 >> $Buildprop; fi
if  grep -qr debug.overlayui.enable $Buildprop; then
   sed -i "s/debug.overlayui.enable=[^ ]*/debug.overlayui.enable=1/" $Buildprop; else
   echo debug.overlayui.enable=1 >> $Buildprop; fi
if  grep -qr debug.egl.hw $Buildprop; then
   sed -i "s/debug.egl.hw=[^ ]*/debug.egl.hw=1/" $Buildprop; else
   echo debug.egl.hw=1 >> $Buildprop; fi
if  grep -qr ro.fb.mode $Buildprop; then
   sed -i "s/ro.fb.mode=[^ ]*/ro.fb.mode=1/" $Buildprop; else
   echo ro.fb.mode=1 >> $Buildprop; fi
if  grep -qr hw3d.force $Buildprop; then
   sed -i "s/hw3d.force=[^ ]*/hw3d.force=1/" $Buildprop; else
   echo hw3d.force=1 >> $Buildprop; fi
if  grep -qr persist.sys.ui.hw $Buildprop; then
   sed -i "s/persist.sys.ui.hw=[^ ]*/persist.sys.ui.hw=1/" $Buildprop; else
   echo persist.sys.ui.hw=1 >> $Buildprop; fi
if  grep -qr ro.sf.compbypass.enable $Buildprop; then
   sed -i "s/ro.sf.compbypass.enable=[^ ]*/ro.sf.compbypass.enable=0/" $Buildprop; else
   echo ro.sf.compbypass.enable=0 >> $Buildprop; fi; fi
echo "" | tee -a $LOG
if grep 0 $RUN; then
until [[ -f $RUNblk ]]; do
sleep 1
done; fi
if grep 0 $RUN; then
ZIPS=/su/xbin/zipit
if [ -e $ZIPS ]; then
sleep 1
echo "$( date +"%m-%d-%Y %H:%M:%S" ) Zipalign and Optimize..." | tee -a $LOG
$ZIPS
echo "See log for detail" | tee -a $LOG
echo "" | tee -a $LOG; fi; fi
if grep 0 $RUN; then
CLEARS=/su/xbin/clearit
if [ -e $CLEARS ]; then
echo "$( date +"%m-%d-%Y %H:%M:%S" ) Cleaning cache..." | tee -a $LOG
$CLEARS
echo "See log for detail" | tee -a $LOG
echo "" | tee -a $LOG; fi; fi
if [ -e /system/etc/init.d/DeYuS ]; then
echo init.d not running cause DeYuS is in it | tee -a $LOG
echo "" | tee -a $LOG; else
### INIT.D Script ###
INIT=/su/etc/@Init.log
if [ -e $INIT ]; then
rm $INIT; fi
if grep 0 $RUN; then
export PATH=/sbin:/system/sbin:/system/bin:/system/xbin:/su/bin:/su/xbin
for i in /system/etc/init.d/*; do
if [ -x $i ]; then
/system/bin/log -t sysinit Running $i
$i | tee -a $INIT; fi
done; fi
### SYSINIT Launcher ###
if grep 0 $RUN; then
INIT=/su/etc/@Init.log
sleep 1
if [ -e $INIT ]; then
rm $INIT; fi
SCRIPT=/system/bin/sysinit
SCRIPTS=/system/etc/init.d
if [ -e $SCRIPTS ]; then
if [ -e $SCRIPT ]; then
echo "$( date +"%m-%d-%Y %H:%M:%S" ) Executing init.d script..." | tee -a $LOG
echo "See log for detail" | tee -a $LOG
echo "" | tee -a $LOG
echo "Begin init.d script... $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $INIT
$SCRIPT | tee -a $INIT; fi
echo "Ending init.d script at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $INIT; fi; fi; fi
if grep 0 $RUN; then
SPEED=/su/xbin/speed
if [ -e $SPEED ]; then
$SPEED | tee -a $LOG
echo "" | tee -a $LOG; fi; fi
echo "Let's proceed all tweaks" | tee -a $LOG
echo "" | tee -a $LOG
echo 243 > /sys/devices/platform/kcal_ctrl.0/kcal_sat
echo 250 > /sys/devices/platform/kcal_ctrl.0/kcal_val
echo 1515 > /sys/devices/platform/kcal_ctrl.0/kcal_hue
echo Y > /sys/module/mdss_fb/parameters/backlight_dimmer
chmod 644 /sys/android_touch/wake_gestures  
chmod 644 /sys/android_touch/sweep2wake 
chmod 644 /sys/android_touch/doubletap2wake  
chmod 644 /sys/android_touch/sweep2sleep
chmod 644 /sys/android_touch/camera_gesture
chmod 644 /sys/vibrator/pwmvalue
chmod 644 /sys/android_touch/vib_strength
echo 0 > /sys/android_touch/wake_gestures
echo 15 > /sys/android_touch/sweep2wake
echo 1 > /sys/android_touch/doubletap2wake
echo 3 > /sys/android_touch/sweep2sleep
echo 1 > /sys/android_touch/camera_gesture
echo 100 > /sys/vibrator/pwmvalue
chmod 444 /sys/vibrator/pwmvalue
echo 45 > /sys/android_touch/vib_strength
if grep 1 /sys/android_touch/doubletap2wake; then
echo "Double Tap 2 Wake is ON" | tee -a $LOG; else
echo "Double Tap 2 Wake is OFF" | tee -a $LOG; fi
if grep 15 /sys/android_touch/sweep2wake; then
echo "Sweep 2 Wake is ON" | tee -a $LOG; else
echo "Sweep Tap 2 Wake is OFF" | tee -a $LOG; fi
if grep 3 /sys/android_touch/sweep2sleep; then
echo "Sweep 2 Sleep is ON" | tee -a $LOG; else
echo "Sweep 2 Sleep is OFF" | tee -a $LOG; fi
if grep 1 /sys/android_touch/camera_gesture; then
echo "Camera Gesture is ON" | tee -a $LOG; else
echo "Camera Gesture is OFF" | tee -a $LOG; fi
chmod 644 /sys/kernel/sound_control_3/gpl_sound_control_locked
echo "0" > /sys/kernel/sound_control_3/gpl_sound_control_locked
chmod 444 /sys/kernel/sound_control_3/gpl_sound_control_locked
if grep 1 /sys/kernel/sound_control_3/gpl_sound_control_locked; then
echo "Sound Secure is ON" | tee -a $LOG; else
echo "Sound Secure is OFF" | tee -a $LOG; fi
chmod 644 /sys/module/snd_soc_wcd9320/parameters/high_perf_mode
echo "1" > /sys/module/snd_soc_wcd9320/parameters/high_perf_mode
chmod 444 /sys/module/snd_soc_wcd9320/parameters/high_perf_mode
if grep 1 /sys/module/snd_soc_wcd9320/parameters/high_perf_mode; then
echo "High PerfSound is ON" | tee -a $LOG; else
echo "High PerfSound is OFF" | tee -a $LOG; fi
chmod 644 /sys/module/snd_soc_wcd9320/parameters/spkr_drv_wrnd
echo "1" > /sys/module/snd_soc_wcd9320/parameters/spkr_drv_wrnd
chmod 444 /sys/module/snd_soc_wcd9320/parameters/spkr_drv_wrnd
if grep 1 /sys/module/snd_soc_wcd9320/parameters/spkr_drv_wrnd; then
echo "Speaker Leakage is ON" | tee -a $LOG; else
echo "Speaker Leakage is OFF" | tee -a $LOG; fi
echo 1 > /sys/kernel/fast_charge/force_fast_charge
#echo 0 > /sys/kernel/fast_charge/force_fast_charge
if grep 1 /sys/kernel/fast_charge/force_fast_charge; then
echo "Fast charge is ON" | tee -a $LOG; else
echo "Fast charge is OFF" | tee -a $LOG; fi
TCP=sociopath
TCPO=highspeed
echo "$TCP" > /proc/sys/net/ipv4/tcp_congestion_control
echo "$TCP" > /proc/sys/net/ipv6/tcp_congestion_control
if grep $TCP /proc/sys/net/ipv4/tcp_congestion_control; then
echo "TCP set to $TCP" | tee -a $LOG; else
echo "TCP $TCP not present" | tee -a $LOG
echo "$TCPO" > /proc/sys/net/ipv4/tcp_congestion_control
echo "$TCPO" > /proc/sys/net/ipv6/tcp_congestion_control
if grep $TCPO /proc/sys/net/ipv4/tcp_congestion_control; then
echo "TCP set to $TCPO" | tee -a $LOG; else
echo "TCP $TCPO not present" | tee -a $LOG; fi; fi
if grep 1 $RUN; then
echo "1" > /proc/sys/net/ipv4/tcp_timestamps
echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse
echo "1" > /proc/sys/net/ipv4/tcp_sack
echo "0" > /proc/sys/net/ipv4/tcp_tw_recycle
echo "1" > /proc/sys/net/ipv4/tcp_window_scaling
echo "5" > /proc/sys/net/ipv4/tcp_keepalive_probes
echo "30" > /proc/sys/net/ipv4/tcp_keepalive_intvl
echo "5" > /proc/sys/net/ipv4/tcp_fin_timeout
#echo "4096 65536 33554432" > /proc/sys/net/ipv4/tcp_wmem
#echo "4096 87380 33554432" > /proc/sys/net/ipv4/tcp_rmem
#echo "4096 57344 524288" > /proc/sys/net/ipv4/tcp_mem
#echo "10240 65535" > /proc/sys/net/ipv4/ip_local_port_range
#echo "16384" > /proc/sys/net/ipv4/tcp_max_syn_backlog
echo "2" > /proc/sys/net/ipv4/conf/all.rp_filter
echo "2" > /proc/sys/net/ipv4/conf/default.rp_filter
echo "16384" > /proc/sys/net/ipv6/tcp_max_syn_backlog
echo "1" > /proc/sys/net/ipv6/conf/all/optimistic_dad
echo "1" > /proc/sys/net/ipv6/conf/all/use_optimistic
echo "5" > /proc/sys/net/ipv4/tcp_keepalive_probes
echo "30" > /proc/sys/net/ipv4/tcp_keepalive_intvl
echo "30" > /proc/sys/net/ipv4/tcp_fin_timeout
echo "1" > /proc/sys/net/ipv4/tcp_moderate_rcvbuf
echo "1" > /proc/sys/net/ipv4/route/flush
echo "6144" > /proc/sys/net/ipv4/udp_rmem_min
echo "6144" > /proc/sys/net/ipv4/udp_wmem_min
echo "1" > /proc/sys/net/ipv4/tcp_rfc1337
echo "0" > /proc/sys/net/ipv4/ip_no_pmtu_disc
echo "0" > /proc/sys/net/ipv4/tcp_ecn
echo "1" > /proc/sys/net/ipv4/tcp_fack
echo "2" > /proc/sys/net/ipv4/tcp_synack_retries
echo "2" > /proc/sys/net/ipv4/tcp_syn_retries
echo "1" > /proc/sys/net/ipv4/tcp_no_metrics_save
echo "1800" > /proc/sys/net/ipv4/tcp_keepalive_time
echo "0" > /proc/sys/net/ipv4/ip_forward
echo "1" > /proc/sys/net/ipv4/tcp_sack
echo "1" > /proc/sys/net/ipv4/tcp_dsack
echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle
echo "1" > /proc/sys/net/ipv4/tcp_window_scaling
echo "0" > /proc/sys/net/ipv4/conf/default/accept_source_route
echo "0" > /proc/sys/net/ipv4/conf/all/accept_source_route
echo "0" > /proc/sys/net/ipv4/conf/all/accept_redirects
echo "0" > /proc/sys/net/ipv4/conf/default/accept_redirects
echo "0" > /proc/sys/net/ipv4/conf/all/secure_redirects
echo "0" > /proc/sys/net/ipv4/conf/default/secure_redirects
echo "1" > /proc/sys/net/ipv4/ip_dynaddr
#echo "1440000" > /proc/sys/net/ipv4/tcp_max_tw_buckets
#echo "1440000" > /proc/sys/net/ipv4/tcp_max_tw_buckets
#echo "20480" > /proc/sys/net/core/optmem_max
#echo "30000" > /proc/sys/net/core/netdev_max_backlog
echo "50" > /proc/sys/net/unix/max_dgram_qlen
echo "1" > /proc/sys/net/ipv6/tcp_timestamps
echo "50" > /proc/sys/net/unix/max_dgram_qlen
#echo "400000" > /proc/sys/net/ipv4.tcp_max_orphans
echo 5 > /proc/sys/net/ipv4/tcp_keepalive_probes
echo 30 > /proc/sys/net/ipv4/tcp_keepalive_intvl
echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout
echo 1 > /proc/sys/net/ipv4/tcp_moderate_rcvbuf
echo 1 > /proc/sys/net/ipv6/route/flush
echo 1 > /proc/sys/net/ipv4/tcp_rfc1337
echo 0 > /proc/sys/net/ipv4/ip_no_pmtu_disc
echo 0 > /proc/sys/net/ipv4/tcp_ecn
echo 1 > /proc/sys/net/ipv4/tcp_fack
echo 1 > /proc/sys/net/ipv4/tcp_no_metrics_save
echo 1800 > /proc/sys/net/ipv4/tcp_keepalive_time
echo 0 > /proc/sys/net/ipv4/ip_forward
echo 1 > /proc/sys/net/ipv4/tcp_sack
echo 1 > /proc/sys/net/ipv4/tcp_dsack
echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle
echo 1 > /proc/sys/net/ipv4/tcp_window_scaling
echo 0 > /proc/sys/net/ipv4/conf/default/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/accept_redirects
echo 0 > /proc/sys/net/ipv4/conf/all/secure_redirects
echo 0 > /proc/sys/net/ipv4/conf/default/secure_redirects
echo 1 > /proc/sys/net/ipv4/ip_dynaddr
#echo 1440000 > /proc/sys/net/ipv4/tcp_max_tw_buckets
#echo 33554432 > /proc/sys/net/core/rmem_max
#echo 33554432 > /proc/sys/net/core/wmem_max
#echo "404480" > /proc/sys/net/core/rmem_default
#echo "404480" > /proc/sys/net/core/wmem_default
#echo 20480 > /proc/sys/net/core/optmem_max
#echo 50 > /proc/sys/net/unix/max_dgram_qlen
fi
echo "Networking tweaks set" | tee -a $LOG
if grep 1 $RUN; then
#echo "1" > /proc/sys/vm/scan_unevictable_pages
echo "1" > /proc/sys/kernel/sched_tunable_scaling
#echo "1053696" > /proc/sys/fs/nr_open
echo "1" > /proc/sys/kernel/sched_compat_yield
echo "1" > /proc/sys/kernel/sched_wake_to_idle
#echo "24189" > /proc/sys/kernel/sched_features
#echo "2048" > /proc/sys/kernel/msgmni
#echo "64000" > /proc/sys/kernel/msgmax
#echo "16384" > /proc/sys/kernel/msgmnb
#echo "4096" > /proc/sys/kernel/shmmni
#echo "40331648" > /proc/sys/kernel/shmmax
#echo "297505" > /proc/sys/fs/file-max
#echo "10" > /proc/sys/fs/lease-break-time
#echo "57581" > /proc/sys/kernel/threads-max
#echo "18000000" > /proc/sys/kernel/sched_latency_ns
#echo "256000" > /proc/sys/kernel/sched_shares_ratelimit
#echo "1500000" > /proc/sys/kernel/sched_min_granularity_ns
#echo "3000000" > /proc/sys/kernel/sched_wakeup_granularity_ns
#echo "5000000" > /proc/sys/kernel/sched_latency_ns
#echo "2097152" > /proc/sys/kernel/shmall
#echo "500 512000 64 2048" > /proc/sys/kernel/sem
echo "30" > /proc/sys/kernel/hung_task_timeout_secs
#echo "32000" > /proc/sys/fs/inotify/max_queued_events
#echo "380" > /proc/sys/fs/inotify/max_user_instances
#echo "16384" > /proc/sys/fs/inotify/max_user_watches
#echo "1" > /proc/sys/vm/stat_interval
echo "6" > /proc/sys/vm/stat_interval
echo "0" > /proc/sys/vm/mmap_min_addr
echo "1" > /proc/sys/vm/highmem_is_dirtyable
echo "0" > /proc/sys/vm/block_dump
echo "4" > /proc/sys/vm/min_free_order_shift
echo "1" > /proc/sys/vm/oom_dump_tasks
#echo "8" > /proc/sys/vm/page-cluster
echo "4" > /proc/sys/vm/page-cluster
echo "1" > /proc/sys/kernel/sched_child_runs_first
###
#echo "60" > /proc/sys/kernel/panic
#echo "1" > /proc/sys/vm/panic_on_oom
#echo "1" > /proc/sys/kernel/softlockup_panic
#echo "1" > /proc/sys/kernel/panic_on_oops
###
echo "0" > /proc/sys/kernel/panic
echo "0" > /proc/sys/vm/panic_on_oom
echo "0" > /proc/sys/kernel/softlockup_panic
echo "0" > /proc/sys/kernel/panic_on_oops
###
#echo "0" > /proc/sys/kernel/hung_task_timeout_secs
echo "3" > /sys/kernel/power_suspend/power_suspend_mode
echo "4096" > /proc/sys/vm/min_free_kbytes
#echo "50000" > /proc/sys/vm/extra_free_kbytes
#echo "4096" > /proc/sys/vm/extra_free_kbytes
echo "1" > /proc/sys/vm/overcommit_memory
echo "80" > /proc/sys/vm/overcommit_ratio
#echo "40" > /proc/sys/vm/overcommit_ratio
echo "1" > /proc/sys/vm/oom_kill_allocating_task
echo "1" > /proc/sys/vm/laptop_mode
#echo "4" > /proc/sys/vm/laptop_mode
echo "Y" > /sys/module/state_notifier/parameters/enabled
echo "150" > /proc/sys/vm/vfs_cache_pressure
#echo "80" > /proc/sys/vm/vfs_cache_pressure
#echo "2" > /proc/sys/vm/dirty_ratio
#echo "4" > /proc/sys/vm/dirty_background_ratio
echo "4" > /proc/sys/vm/dirty_ratio
echo "8" > /proc/sys/vm/dirty_background_ratio
echo "500" > /proc/sys/vm/dirty_expire_centisecs
echo "900" > /proc/sys/vm/dirty_writeback_centisecs
#echo "3000" > /proc/sys/vm/dirty_expire_centisecs
#echo "5000" > /proc/sys/vm/dirty_writeback_centisecs
echo "1" > /proc/sys/vm/dynamic_dirty_writeback
echo "1500" > /proc/sys/vm/dirty_writeback_active_centisecs
echo "2000" > /proc/sys/vm/dirty_writeback_suspend_centisecs
echo "512" > /proc/sys/kernel/random/write_wakeup_threshold
echo "256" > /proc/sys/kernel/random/read_wakeup_threshold; fi
if grep 1 $RUN; then
echo '0' > /sys/kernel/debug/msm_fb/0/vsync_enable
if [ -e /sys/kernel/debug/sched_features ]; then
echo "NO_GENTLE_FAIR_SLEEPERS" > /sys/kernel/debug/sched_features
echo "NO_NEW_FAIR_SLEEPERS" >> /sys/kernel/debug/sched_features
echo "NO_NORMALIZED_SLEEPER" >> /sys/kernel/debug/sched_features
#echo "NO_ARCH_POWER" >> /sys/kernel/debug/sched_features
echo "NO_LB_BIAS" >> /sys/kernel/debug/sched_features
echo "NO_NEXT_BUDDY" >> /sys/kernel/debug/sched_features
echo "NO_START_DEBIT" >> /sys/kernel/debug/sched_features
echo "NO_AFFINE_WAKEUPS" >> /sys/kernel/debug/sched_features
echo "NO_LAST_BUDDY" >> /sys/kernel/debug/sched_features
echo "NO_CACHE_HOT_BUDDY" >> /sys/kernel/debug/sched_features
echo "NO_WAKEUP_PREEMPTION" >> /sys/kernel/debug/sched_features
echo "NO_HRTICK" >> /sys/kernel/debug/sched_features
echo "NO_DOUBLE_TICK" >> /sys/kernel/debug/sched_features
echo "NO_OWNER_SPIN" >> /sys/kernel/debug/sched_features
echo "NO_NONTASK_POWER" >> /sys/kernel/debug/sched_features
echo "NO_TTWU_QUEUE" >> /sys/kernel/debug/sched_features
echo "NO_FORCE_SD_OVERLAP" >> /sys/kernel/debug/sched_features
echo "NO_RT_RUNTIME_SHARE" >> /sys/kernel/debug/sched_features
echo "NO_LB_MIN" >> /sys/kernel/debug/sched_features; fi; fi
#chmod 664 /sys/kernel/sched/*
echo 0 > /sys/kernel/sched/gentle_fair_sleepers
echo 1 > /sys/kernel/sched/arch_power
echo 0 > /sys/kernel/sched/new_fair_sleepers
echo 0 > /sys/kernel/sched/normalized_sleepers
echo 0 > /sys/kernel/sched/lb_bias
echo 0 > /sys/kernel/sched/next_buddy
echo 0 > /sys/kernel/sched/start_debit
echo 0 > /sys/kernel/sched/affine_wakeups
echo 0 > /sys/kernel/sched/last_buddy
echo 0 > /sys/kernel/sched/cache_hot_buddy
echo 0 > /sys/kernel/sched/wakeup_preemption
echo 0 > /sys/kernel/sched/hrtick
echo 0 > /sys/kernel/sched/double_tick
echo 0 > /sys/kernel/sched/owner_spin
echo 0 > /sys/kernel/sched/nontask_power
echo 0 > /sys/kernel/sched/ttwu_queue
echo 0 > /sys/kernel/sched/force_sd_overlap
echo 0 > /sys/kernel/sched/rt_runtime_share
echo 0 > /sys/kernel/sched/lb_min
echo "Kernel Vm and Schedule tweaks set" | tee -a $LOG
echo "" | tee -a $LOG
RAM=$(($(awk '/MemTotal/{print $2}' /proc/meminfo)/1024))
lmk1=$((RAM*8));
lmk2=$((RAM*10));
lmk3=$((RAM*12));
lmk4=$((RAM*14));
lmk5=$((RAM*16));
lmk6=$((RAM*18));
if grep 1 $RUN; then
echo "Apply Ram settings for $RAM mb" | tee -a $LOG
echo 1 > /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk
echo 1 > /sys/module/lowmemorykiller/parameters/lmk_fast_run
echo 53059 > /sys/module/lowmemorykiller/parameters/vmpressure_file_min
echo 1 > /sys/module/process_reclaim/parameters/enable_process_reclaim
echo 95 > /sys/module/process_reclaim/parameters/pressure_max
echo "48" > /sys/module/lowmemorykiller/parameters/cost; else
echo "$lmk1,$lmk2,$lmk3,$lmk4,$lmk5,$lmk6" > /sys/module/lowmemorykiller/parameters/minfree
echo 1 > /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk
echo "32" > /sys/module/lowmemorykiller/parameters/cost; fi
echo "Setting Zram, Ksm/Uksm and I/O" | tee -a $LOG
if grep 1 $RUN; then
if [ -e /sys/block/zram0 ]; then
ZRAMSIZE=314572800
if grep $ZRAMSIZE /sys/block/zram0/disksize; then
echo "ZRAM is already activated" | tee -a $LOG; else
swapoff /dev/block/zram0 > /dev/null 2>&1
echo "1" > /sys/block/zram0/reset
echo "20" > /proc/sys/vm/swappiness
#echo "60" > /proc/sys/vm/swappiness
echo "1" > /sys/block/zram0/max_comp_streams
echo "lz4" > /sys/block/zram0/comp_algorithm
# echo $((128*1024*1024)) > /sys/block/zram0/disksize
#echo "136314880" > /sys/block/zram0/disksize
echo "$ZRAMSIZE" > /sys/block/zram0/disksize
#mknod /dev/block/zram0 b 253 0
mkswap /dev/block/zram0 > /dev/null 2>&1
swapon /dev/block/zram0 > /dev/null 2>&1
echo "ZRAM is activated" | tee -a $LOG; fi; else
echo "Your kernel doesn't support ZRAM" | tee -a $LOG
echo "20" > /proc/sys/vm/swappiness; fi; fi
if grep 1 $RUN; then
if [ -d /sys/kernel/mm/ksm ]; then
echo "1" > /sys/kernel/mm/ksm/run
echo "256" > /sys/kernel/mm/ksm/pages_to_scan
echo "3000" > /sys/kernel/mm/ksm/sleep_millisecs
echo "1" >  /sys/kernel/mm/ksm/deferred_timer; else
echo "Your kernel doesn't support KSM" | tee -a $LOG; fi
if grep 1 /sys/kernel/mm/ksm/run; then
echo "KSM is activated" | tee -a $LOG; fi; fi
if grep 1 $RUN; then
if [ -d /sys/kernel/mm/uksm ]; then
echo "1" > /sys/kernel/mm/uksm/run
echo "1000" > /sys/kernel/mm/uksm/sleep_millisecs
echo "8" > /sys/kernel/mm/uksm/max_cpu_percentage; else
echo "Your kernel doesn't support UKSM" | tee -a $LOG; fi
if grep 1 /sys/kernel/mm/uksm/run; then
echo "UKSM is activated" | tee -a $LOG; fi; fi
#IOSCHED=deadline
#IOSCHED=tripndroid
#IOSCHED=zen
IOSCHED=sioplus
MEM=512
MEMO=2048
#MEMO=1024
NRR=256
NRRO=512
if grep 1 $RUN; then
MMC=`ls -d /sys/block/mmc*`
for O in $MMC; do
#chmod 644 $O/*
if [ -e $O/queue/rotational ]; then
chmod 644 $O/queue/rotational
echo "1" > $O/queue/rotational; fi
if [ -e $O/queue/add_random ]; then
chmod 644 $O/queue/add_random
echo "1" > $O/queue/add_random; fi
if [ -e $O/queue/iostats ]; then
chmod 644 $O/queue/iostats
echo "0" > $O/queue/iostats; fi
if [ -e $O/queue/rq_affinity ]; then
chmod 644 $O/queue/rq_affinity
echo "2" > $O/queue/rq_affinity; fi
if [ -e $O/queue/nr_requests ]; then
chmod 644 $O/queue/nr_requests
echo "$NRRO" > $O/queue/nr_requests; fi
if [ -e $O/queue/nomerges ]; then
chmod 644 $O/queue/nomerges
echo "0" > $O/queue/nomerges; fi
if [ -e $O/queue/read_ahead_kb ]; then
chmod 644 $O/queue/read_ahead_kb
echo "$MEMO" > $O/queue/read_ahead_kb; fi
if [ -e $O/queue/scheduler ]; then
chmod 644 $O/queue/scheduler
echo "$IOSCHED" > $O/queue/scheduler; fi
echo "I/O settings set for $O" | tee -a $LOG
done
if grep $IOSCHED /sys/block/mmcblk0/queue/scheduler; then
echo "I/O set to $IOSCHED with RA $MEMO and NRR $NRRO" | tee -a $LOG; else
echo "$IOSCHED doesn't exist" | tee -a $LOG; fi
#echo "" | tee -a $LOG
STL=`ls -d /sys/block/stl*`;
BML=`ls -d /sys/block/bml*`;
ZRM=`ls -d /sys/block/zram*`;
MTD=`ls -d /sys/block/mtd*`;
ROM=`ls -d /sys/block/ram*`;
LP=`ls -d /sys/block/loop*`;
for X in $STL $BML $ZRM $MTD $ROM $LP; do
#chmod 644 $X/*
if [ -e $X/queue/rotational ]; then
chmod 644 $X/queue/rotational
echo "0" > $X/queue/rotational; fi
if [ -e $X/queue/add_random ]; then
chmod 644 $X/queue/add_random
echo "0" > $X/queue/add_random; fi
if [ -e $X/queue/iostats ]; then
chmod 644 $X/queue/iostats
echo "0" > $X/queue/iostats; fi
if [ -e $X/queue/rq_affinity ]; then
chmod 644 $X/queue/rq_affinity
echo "1" > $X/queue/rq_affinity; fi
if [ -e $X/queue/nr_requests ]; then
chmod 644 $X/queue/nr_requests
echo "$NRR" > $X/queue/nr_requests; fi
if [ -e $X/queue/nomerges ]; then
chmod 644 $X/queue/nomerges
echo "0" > $X/queue/nomerges; fi
if [ -e $X/queue/read_ahead_kb ]; then
chmod 644 $X/queue/read_ahead_kb
echo "$MEM" > $X/queue/read_ahead_kb; fi
if [ -e $X/queue/scheduler ]; then
chmod 644 $X/queue/scheduler
echo "$IOSCHED" > $X/queue/scheduler; fi
echo "I/O settings set for $X" | tee -a $LOG
done
echo "I/O set to RA $MEM and NRR $NRR" | tee -a $LOG
echo "" | tee -a $LOG; fi
if grep 1 $RUN; then
echo "Disabling debugging.." | tee -a $LOG
if [ -e /sys/module/lowmemorykiller/parameters/debug_level ]; then
chmod 664 /sys/module/lowmemorykiller/parameters/debug_level
echo "0" > /sys/module/lowmemorykiller/parameters/debug_level
chmod 444 /sys/module/lowmemorykiller/parameters/debug_level
if grep 0 /sys/module/lowmemorykiller/parameters/debug_level; then
echo "Debug level 0" | tee -a $LOG; else
echo "Debug level 1" | tee -a $LOG; fi; fi
if [ -e /parameters/debug_mask ]; then
chmod 664 /parameters/debug_mask
echo "0" > /parameters/debug_mask
chmod 444 /parameters/debug_mask
if grep p /parameters/debug_mask; then
echo "Debug mask 0" | tee -a $LOG; else
echo "Debug mask 1" | tee -a $LOG; fi; fi
if [ -e /sys/module/wakelock/parameters/debug_mask ]; then
chmod 664 /sys/module/wakelock/parameters/debug_mask
echo "0" > /sys/module/wakelock/parameters/debug_mask
chmod 444 /sys/module/wakelock/parameters/debug_mask
if grep 0 /sys/module/wakelock/parameters/debug_mask; then
echo "Debug wakelock 0" | tee -a $LOG; else
echo "Debug wakelock 1" | tee -a $LOG; fi; fi
if [ -e /sys/module/userwakelock/parameters/debug_mask ]; then
chmod 664 /sys/module/userwakelock/parameters/debug_mask
echo "0" > /sys/module/userwakelock/parameters/debug_mask
chmod 444 /sys/module/userwakelock/parameters/debug_mask
if grep 0 /sys/module/userwakelock/parameters/debug_mask; then
echo "Debug userwakelock 0" | tee -a $LOG; else
echo "Debug userwakelock 1" | tee -a $LOG; fi; fi
if [ -e /sys/module/earlysuspend/parameters/debug_mask ]; then
chmod 664 /sys/module/earlysuspend/parameters/debug_mask
echo "0" > /sys/module/earlysuspend/parameters/debug_mask
chmod 444 /sys/module/earlysuspend/parameters/debug_mask
if grep 0 /sys/module/earlysuspend/parameters/debug_mask; then
echo "Debug earlysuspend 0" | tee -a $LOG; else
echo "Debug earlysuspend 1" | tee -a $LOG; fi; fi
if [ -e /sys/module/alarm/parameters/debug_mask ]; then
chmod 664 /sys/module/alarm/parameters/debug_mask
echo "0" > /sys/module/alarm/parameters/debug_mask
chmod 444 /sys/module/alarm/parameters/debug_mask
if grep 0 /sys/module/alarm/parameters/debug_mask; then
echo "Debug alarm 0" | tee -a $LOG; else
echo "Debug alarm 1" | tee -a $LOG; fi; fi
if [ -e /sys/module/alarm_dev/parameters/debug_mask ]; then
chmod 664 /sys/module/alarm_dev/parameters/debug_mask
echo "0" > /sys/module/alarm_dev/parameters/debug_mask
chmod 444 /sys/module/alarm_dev/parameters/debug_mask
if grep 0 /sys/module/alarm_dev/parameters/debug_mask; then
echo "Debug alarm_dev 0" | tee -a $LOG; else
echo "Debug alarm_dev 1" | tee -a $LOG; fi; fi
if [ -e /sys/module/binder/parameters/debug_mask ]; then
chmod 664 /sys/module/binder/parameters/debug_mask
echo "0" > /sys/module/binder/parameters/debug_mask
chmod 444 /sys/module/binder/parameters/debug_mask
if grep 0 /sys/module/binder/parameters/debug_mask; then
echo "Debug binder 0" | tee -a $LOG; else
echo "Debug binder 1" | tee -a $LOG; fi; fi; fi
echo "" | tee -a $LOG
echo "All tweaks finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG
$L "____ _   _ ____ _  _ ____ __!!!Finished!!!__ ____ _  _ _  _ ____ ___"; $L "at $( date +"%m-%d-%Y %H:%M:%S" )"
if grep 1 $RUN; then
until [[ -d $RUNblk ]]; do
sleep 1
done
if grep 1 $RUN; then
echo "" | tee -a $LOG
echo "fstrim started at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG
fstrim -v /cache | tee -a $LOG
fstrim -v /data | tee -a $LOG
fstrim -v /system | tee -a $LOG
fstrim -v /preload | tee -a $LOG
echo "fstrim finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $LOG
echo "" | tee -a $LOG
echo "Droping cache" | tee -a $LOG
free | awk '/Mem/{print "Free Memory Before : "$4/1024" MB";}' | tee -a $LOG
sync
sysctl -w vm.drop_caches=3
sleep 1
dc=/proc/sys/vm/drop_caches
dc_v=$(cat $dc)
if [ "$dc_v" -gt 1 ]; then
sysctl -w vm.drop_caches=1; fi
free | busybox awk '/Mem/{print "Free Memory After : "$4/1024" MB";}' | tee -a $LOG; fi; fi
if [ -d $RRDEBUGDIR ]; then
mv $RRDEBUGDIR/* $RUNblk
rmdir $RRDEBUGDIR; fi
###BCL CONF###
if grep De¥uS /data/system/users/0.xml; then
BCL=39
#BCL=39
if [ $BCL -eq "39" ]; then
echo "Enabling Bcl"  | tee -a $LOG
#echo 3800000 > /sys/devices/qcom,bcl.39/high_threshold_ua
#echo 3600000 > /sys/devices/qcom,bcl.39/low_threshold_ua
#echo 3800000 > /sys/devices/qcom,bcl.39/vph_high_thresh_uv
#echo 3600000 > /sys/devices/qcom,bcl.39/vph_low_thresh_uv
#echo 1036800 > /sys/devices/qcom,bcl.39/freq_max
echo "enabled" > /sys/devices/qcom,bcl.39/mode; fi
if [ $BCL -eq "38" ]; then
echo "Enabling Bcl"  | tee -a $LOG
#echo 3800000 > /sys/devices/qcom,bcl.38/high_threshold_ua
#echo 3600000 > /sys/devices/qcom,bcl.38/low_threshold_ua
#echo 3800000 > /sys/devices/qcom,bcl.38/vph_high_thresh_uv
#echo 3600000 > /sys/devices/qcom,bcl.38/vph_low_thresh_uv
#echo 1036800 > /sys/devices/qcom,bcl.38/freq_max
echo "enabled" > /sys/devices/qcom,bcl.38/mode; fi
echo "Y" > /sys/module/battery_current_limit/parameters/bcl_hotplug_enable; fi
if grep 1 $RUN; then
rm $RUNblk/Android/@DeYuS.log
cp $LOG $RUNblk/Android/@DeYuS.log
echo "" | tee -a $RUNblk/Android/@DeYuS.log
echo "DeYuS log copied at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $RUNblk/Android/@DeYuS.log; fi; fi
else
echo "Busybox not installed, Script exited" | tee -a $LOG
exit
fi; fi
exit
